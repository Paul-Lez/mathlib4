/-
Copyright (c) 2024 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Order.CompletePartialOrder
import Mathlib.Topology.Algebra.UniformGroup.Defs
import Mathlib.Topology.Order.MonotoneConvergence
import Mathlib.Topology.UniformSpace.UniformConvergence

/-! # Dini's Theorem

This file proves Dini's theorem, which states that if `F n` is a monotone increasing sequence of
continuous real-valued functions on a compact set `s` converging pointwise to a continuous function
`f`, then `F n` converges uniformly to `f`.

We generalize the codomain from `‚Ñù` to a linearly ordered commutative group `G` with the order
topology which is also order closed. Therefore it applies also when the codomain is `‚Ñ§`, `‚Ñö`, or
`‚Ñù‚â•0À£`.
-/

open Filter Topology

namespace UniformGroup

-- we have this in Mathlib, but it uses the wrong `UniformSpace` instance.
@[to_additive]
theorem tendstoUniformly_iff' {Œπ Œ± G : Type*} [UniformSpace G] [Group G]
    [UniformGroup G] (F : Œπ ‚Üí Œ± ‚Üí G) (f : Œ± ‚Üí G) (p : Filter Œπ) :
    TendstoUniformly F f p ‚Üî
      ‚àÄ u ‚àà ùìù (1 : G), ‚àÄ·∂† i in p, ‚àÄ a, F i a / f a ‚àà u :=
  toUniformSpace_eq (G := G) ‚ñ∏
    ‚ü®fun h u hu => h _ ‚ü®u, hu, fun _ => id‚ü©,
      fun h _ ‚ü®u, hu, hv‚ü© => mem_of_superset (h u hu) fun _ hi a => hv (hi a)‚ü©

variable {Œπ Œ± G : Type*} [SemilatticeSup Œπ]
    [Nonempty Œπ] [TopologicalSpace Œ±] [LinearOrderedCommGroup G] [UniformSpace G]
    [UniformGroup G] [OrderTopology G] [OrderClosedTopology G] [Nontrivial G]
    {F : Œπ ‚Üí Œ± ‚Üí G} {f : Œ± ‚Üí G}

/-- **Dini's theorem** If `F n` is a monotone increasing collection of continuous functions on a
compact space converging pointwise to a continuous `f`, then `F n` converges uniformly to `f`. -/
@[to_additive "**Dini's theorem** If `F n` is a monotone increasing collection of continuous
functions on a compact space converging pointwise to a continuous `f`, then `F n` converges
uniformly to `f`."]
lemma tendstoUniformly_of_forall_tendsto [CompactSpace Œ±] (hF_cont : ‚àÄ i, Continuous (F i))
    (hF_mono : Monotone F) (hf : Continuous f) (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :
    TendstoUniformly F f atTop := by
  have F_le_f (x : Œ±) (n : Œπ) : F n x ‚â§ f x :=
    (monotone_app _ _ hF_mono).ge_of_tendsto (h_tendsto x) n
  rw [tendstoUniformly_iff' F f atTop]
  intro v hv
  simp_rw +singlePass [‚Üê tendsto_div_nhds_one_iff] at h_tendsto
  obtain ‚ü®y, hy‚ü© := exists_one_lt' (Œ± := G)
  obtain ‚ü®l, u, h‚ÇÄ, h‚ü© := mem_nhds_iff_exists_Ioo_subset' ‚ü®y‚Åª¬π, inv_lt_one'.mpr hy‚ü© ‚ü®y, hy‚ü© |>.mp hv
  have mono_preimage_Ioo : Monotone (fun i => (fun x => F i x / f x) ‚Åª¬π' Set.Ioo l u) := by
    intro n m hnm x hx
    simp only [Set.mem_preimage, Set.mem_Ioo] at hx ‚ä¢
    refine ‚ü®hx.1.trans_le ?_, div_le_one'.2 (F_le_f _ _) |>.trans_lt h‚ÇÄ.2‚ü©
    gcongr
    exact hF_mono hnm x
  obtain ‚ü®n, hn‚ü© := isCompact_univ.elim_directed_cover _
    (fun n ‚Ü¶ isOpen_Ioo.preimage <| (hF_cont n).div' hf)
    (fun x ‚Ü¶ by simpa using Eventually.exists <| (h_tendsto x).eventually <| isOpen_Ioo.mem_nhds h‚ÇÄ)
    (directed_of_isDirected_le mono_preimage_Ioo)
  filter_upwards [Ici_mem_atTop n] with m (hnm : n ‚â§ m) x
  exact h <| mono_preimage_Ioo hnm <| hn trivial

/-- **Dini's theorem** If `F n` is a monotone increasing collection of continuous functions on a
compact set `s` converging pointwise to a continuous `f`, then `F n` converges uniformly to `f`. -/
@[to_additive "**Dini's theorem** If `F n` is a monotone increasing collection of continuous
functions on a compact set `s` converging pointwise to a continuous `f`, then `F n` converges
uniformly to `f`."]
lemma tendstoUniformlyOn_of_forall_tendsto {s : Set Œ±} (hs : IsCompact s)
    (hF_cont : ‚àÄ i, ContinuousOn (F i) s) (hF_mono : ‚àÄ x ‚àà s, Monotone (F ¬∑ x))
    (hf : ContinuousOn f s) (h_tendsto : ‚àÄ x ‚àà s, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :
    TendstoUniformlyOn F f atTop s := by
  rw [tendstoUniformlyOn_iff_tendstoUniformly_comp_coe]
  have := isCompact_iff_compactSpace.mp hs
  exact tendstoUniformly_of_forall_tendsto (hF_cont ¬∑ |>.restrict) (fun _ _ h x ‚Ü¶ hF_mono _ x.2 h)
    hf.restrict (fun x ‚Ü¶ h_tendsto x x.2)
