/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison, Sina Hazratpour
-/
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Comma.Over

/-!
# The Grothendieck construction

Given a functor `F : C ‚•§ Cat`, the objects of `Grothendieck F`
consist of dependent pairs `(b, f)`, where `b : C` and `f : F.obj c`,
and a morphism `(b, f) ‚ü∂ (b', f')` is a pair `Œ≤ : b ‚ü∂ b'` in `C`, and
`œÜ : (F.map Œ≤).obj f ‚ü∂ f'`

`Grothendieck.functor` makes the Grothendieck construction into a functor from the functor category
`C ‚•§ Cat` to the over category `Over C` in the category of categories.

Categories such as `PresheafedSpace` are in fact examples of this construction,
and it may be interesting to try to generalize some of the development there.

## Implementation notes

Really we should treat `Cat` as a 2-category, and allow `F` to be a 2-functor.

There is also a closely related construction starting with `G : C·µí·µñ ‚•§ Cat`,
where morphisms consists again of `Œ≤ : b ‚ü∂ b'` and `œÜ : f ‚ü∂ (F.map (op Œ≤)).obj f'`.

## References

See also `CategoryTheory.Functor.Elements` for the category of elements of functor `F : C ‚•§ Type`.

* https://stacks.math.columbia.edu/tag/02XV
* https://ncatlab.org/nlab/show/Grothendieck+construction

-/


universe u

namespace CategoryTheory

variable {C D : Type*} [Category C] [Category D]
variable (F : C ‚•§ Cat)

/--
The Grothendieck construction (often written as `‚à´ F` in mathematics) for a functor `F : C ‚•§ Cat`
gives a category whose
* objects `X` consist of `X.base : C` and `X.fiber : F.obj base`
* morphisms `f : X ‚ü∂ Y` consist of
  `base : X.base ‚ü∂ Y.base` and
  `f.fiber : (F.map base).obj X.fiber ‚ü∂ Y.fiber`
-/
-- Porting note (https://github.com/leanprover-community/mathlib4/issues/5171): no such linter yet
-- @[nolint has_nonempty_instance]
structure Grothendieck where
  /-- The underlying object in `C` -/
  base : C
  /-- The object in the fiber of the base object. -/
  fiber : F.obj base

namespace Grothendieck

variable {F}

/-- A morphism in the Grothendieck category `F : C ‚•§ Cat` consists of
`base : X.base ‚ü∂ Y.base` and `f.fiber : (F.map base).obj X.fiber ‚ü∂ Y.fiber`.
-/
structure Hom (X Y : Grothendieck F) where
  /-- The morphism between base objects. -/
  base : X.base ‚ü∂ Y.base
  /-- The morphism from the pushforward to the source fiber object to the target fiber object. -/
  fiber : (F.map base).obj X.fiber ‚ü∂ Y.fiber

@[ext (iff := false)]
theorem ext {X Y : Grothendieck F} (f g : Hom X Y) (w_base : f.base = g.base)
    (w_fiber : eqToHom (by rw [w_base]) ‚â´ f.fiber = g.fiber) : f = g := by
  cases f; cases g
  congr
  dsimp at w_base
  aesop_cat

/-- The identity morphism in the Grothendieck category.
-/
def id (X : Grothendieck F) : Hom X X where
  base := ùüô X.base
  fiber := eqToHom (by erw [CategoryTheory.Functor.map_id, Functor.id_obj X.fiber])

instance (X : Grothendieck F) : Inhabited (Hom X X) :=
  ‚ü®id X‚ü©

/-- Composition of morphisms in the Grothendieck category.
-/
def comp {X Y Z : Grothendieck F} (f : Hom X Y) (g : Hom Y Z) : Hom X Z where
  base := f.base ‚â´ g.base
  fiber :=
    eqToHom (by erw [Functor.map_comp, Functor.comp_obj]) ‚â´ (F.map g.base).map f.fiber ‚â´ g.fiber

attribute [local simp] eqToHom_map

instance : Category (Grothendieck F) where
  Hom X Y := Grothendieck.Hom X Y
  id X := Grothendieck.id X
  comp := @fun _ _ _ f g => Grothendieck.comp f g
  comp_id := @fun X Y f => by
    dsimp; ext
    ¬∑ simp [comp, id]
    ¬∑ dsimp [comp, id]
      rw [‚Üê NatIso.naturality_2 (eqToIso (F.map_id Y.base)) f.fiber]
      simp
  id_comp := @fun X Y f => by dsimp; ext <;> simp [comp, id]
  assoc := @fun W X Y Z f g h => by
    dsimp; ext
    ¬∑ simp [comp, id]
    ¬∑ dsimp [comp, id]
      rw [‚Üê NatIso.naturality_2 (eqToIso (F.map_comp _ _)) f.fiber]
      simp

@[simp]
theorem id_base (X : Grothendieck F) :
    Hom.base (ùüô X) = ùüô X.base := by
  rfl

@[simp]
theorem id_fiber (X : Grothendieck F) :
    Hom.fiber (ùüô X) = eqToHom (by erw [CategoryTheory.Functor.map_id, Functor.id_obj X.fiber]) :=
  rfl

@[simp]
theorem comp_base {X Y Z : Grothendieck F} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).base = f.base ‚â´ g.base :=
  rfl

@[simp]
theorem comp_fiber {X Y Z : Grothendieck F} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    Hom.fiber (f ‚â´ g) =
    eqToHom (by erw [Functor.map_comp, Functor.comp_obj]) ‚â´
    (F.map g.base).map f.fiber ‚â´ g.fiber :=
  rfl


theorem congr {X Y : Grothendieck F} {f g : X ‚ü∂ Y} (h : f = g) :
    f.fiber = eqToHom (by subst h; rfl) ‚â´ g.fiber := by
  subst h
  dsimp
  simp

lemma eqToHom_eq {X Y : Grothendieck F} (hF : X = Y) :
    eqToHom hF = { base := eqToHom (by subst hF; rfl), fiber := eqToHom (by subst hF; simp) } := by
  subst hF
  rfl
section

variable (F)

/-- The forgetful functor from `Grothendieck F` to the source category. -/
@[simps!]
def forget : Grothendieck F ‚•§ C where
  obj X := X.1
  map := @fun _ _ f => f.1

end

section

variable {G : C ‚•§ Cat}

/-- The Grothendieck construction is functorial: a natural transformation `Œ± : F ‚ü∂ G` induces
a functor `Grothendieck.map : Grothendieck F ‚•§ Grothendieck G`.
-/
@[simps!]
def map (Œ± : F ‚ü∂ G) : Grothendieck F ‚•§ Grothendieck G where
  obj X :=
  { base := X.base
    fiber := (Œ±.app X.base).obj X.fiber }
  map {X Y} f :=
  { base := f.base
    fiber := (eqToHom (Œ±.naturality f.base).symm).app X.fiber ‚â´ (Œ±.app Y.base).map f.fiber }
  map_id X := by simp only [Cat.eqToHom_app, id_fiber, eqToHom_map, eqToHom_trans]; rfl
  map_comp {X Y Z} f g := by
    dsimp
    congr 1
    simp only [comp_fiber f g, ‚Üê Category.assoc, Functor.map_comp, eqToHom_map]
    congr 1
    simp only [Cat.eqToHom_app, Cat.comp_obj, eqToHom_trans, eqToHom_map, Category.assoc]
    erw [Functor.congr_hom (Œ±.naturality g.base).symm f.fiber]
    simp

theorem map_obj {Œ± : F ‚ü∂ G} (X : Grothendieck F) :
    (Grothendieck.map Œ±).obj X = ‚ü®X.base, (Œ±.app X.base).obj X.fiber‚ü© := rfl

theorem map_map {Œ± : F ‚ü∂ G} {X Y : Grothendieck F} {f : X ‚ü∂ Y} :
    (Grothendieck.map Œ±).map f =
    ‚ü®f.base, (eqToHom (Œ±.naturality f.base).symm).app X.fiber ‚â´ (Œ±.app Y.base).map f.fiber‚ü© := rfl

/-- The functor `Grothendieck.map Œ± : Grothendieck F ‚•§ Grothendieck G` lies over `C`.-/
theorem functor_comp_forget {Œ± : F ‚ü∂ G} :
    Grothendieck.map Œ± ‚ãô Grothendieck.forget G = Grothendieck.forget F := rfl

theorem map_id_eq : map (ùüô F) = ùüô (Cat.of <| Grothendieck <| F) := by
  fapply Functor.ext
  ¬∑ intro X
    rfl
  ¬∑ intro X Y f
    simp [map_map]
    rfl

/-- Making the equality of functors into an isomorphism. Note: we should avoid equality of functors
if possible, and we should prefer `map_id_iso` to `map_id_eq` whenever we can. -/
def mapIdIso : map (ùüô F) ‚âÖ ùüô (Cat.of <| Grothendieck <| F) := eqToIso map_id_eq

variable {H : C ‚•§ Cat}
theorem map_comp_eq (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    map (Œ± ‚â´ Œ≤) = map Œ± ‚ãô map Œ≤ := by
  fapply Functor.ext
  ¬∑ intro X
    rfl
  ¬∑ intro X Y f
    simp only [map_map, map_obj_base, NatTrans.comp_app, Cat.comp_obj, Cat.comp_map,
      eqToHom_refl, Functor.comp_map, Functor.map_comp, Category.comp_id, Category.id_comp]
    fapply Grothendieck.ext
    ¬∑ rfl
    ¬∑ simp

theorem map_comp_eq_assoc (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (I : Grothendieck H ‚•§ D) :
    map (Œ± ‚â´ Œ≤) ‚ãô I = map Œ± ‚ãô map Œ≤ ‚ãô I := by rw [map_comp_eq, Functor.assoc]

/-- Making the equality of functors into an isomorphism. Note: we should avoid equality of functors
if possible, and we should prefer `map_comp_iso` to `map_comp_eq` whenever we can. -/
def mapCompIso (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : map (Œ± ‚â´ Œ≤) ‚âÖ map Œ± ‚ãô map Œ≤ := eqToIso (map_comp_eq Œ± Œ≤)

def map_iso (Œ± : F ‚âÖ G) : Grothendieck F ‚âå Grothendieck G where
  functor := map Œ±.hom
  inverse := map Œ±.inv
  unitIso := by
    apply eqToIso
    rw [‚Üê map_comp_eq, Iso.hom_inv_id, map_id_eq]
    rfl
  counitIso := by
    apply eqToIso
    rw [‚Üê map_comp_eq, Iso.inv_hom_id, map_id_eq]
    rfl

instance IsEquivalence_map (Œ± : F ‚ü∂ G) [IsIso Œ±] : (map Œ±).IsEquivalence := by
  suffices map_iso (asIso Œ±) |>.functor |>.IsEquivalence by simpa
  infer_instance

end

universe v

/-- The Grothendieck construction as a functor from the functor category `E ‚•§ Cat` to the
over category `Over E`. -/
def functor {E : Cat.{v,u}} : (E ‚•§ Cat.{v,u}) ‚•§ Over (T := Cat.{v,u}) E where
  obj F := Over.mk (X := E) (Y := Cat.of (Grothendieck F)) (Grothendieck.forget F)
  map {_ _} Œ± := Over.homMk (X:= E) (Grothendieck.map Œ±) Grothendieck.functor_comp_forget
  map_id F := by
    ext
    exact Grothendieck.map_id_eq (F := F)
  map_comp Œ± Œ≤ := by
    simp [Grothendieck.map_comp_eq Œ± Œ≤]
    rfl

universe w

variable (G : C ‚•§ Type w)

/-- Auxiliary definition for `grothendieckTypeToCat`, to speed up elaboration. -/
@[simps!]
def grothendieckTypeToCatFunctor : Grothendieck (G ‚ãô typeToCat) ‚•§ G.Elements where
  obj X := ‚ü®X.1, X.2.as‚ü©
  map f := ‚ü®f.1, f.2.1.1‚ü©

/-- Auxiliary definition for `grothendieckTypeToCat`, to speed up elaboration. -/
-- Porting note:
-- `simps` is incorrectly producing Prop-valued projections here,
-- so we manually specify which ones to produce.
-- See https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/!4.233204.20simps.20bug.20.28Grothendieck.20construction.29
@[simps! obj_base obj_fiber_as map_base]
def grothendieckTypeToCatInverse : G.Elements ‚•§ Grothendieck (G ‚ãô typeToCat) where
  obj X := ‚ü®X.1, ‚ü®X.2‚ü©‚ü©
  map f := ‚ü®f.1, ‚ü®‚ü®f.2‚ü©‚ü©‚ü©

/-- The Grothendieck construction applied to a functor to `Type`
(thought of as a functor to `Cat` by realising a type as a discrete category)
is the same as the 'category of elements' construction.
-/
-- See porting note on grothendieckTypeToCatInverse.
-- We just want to turn off grothendieckTypeToCat_inverse_map_fiber_down_down,
-- so have to list the complement here for `@[simps]`.
@[simps! functor_obj_fst functor_obj_snd functor_map_coe inverse_obj_base inverse_obj_fiber_as
  inverse_map_base unitIso_hom_app_base unitIso_hom_app_fiber unitIso_inv_app_base
  unitIso_inv_app_fiber counitIso_hom_app_coe counitIso_inv_app_coe]
def grothendieckTypeToCat : Grothendieck (G ‚ãô typeToCat) ‚âå G.Elements where
  functor := grothendieckTypeToCatFunctor G
  inverse := grothendieckTypeToCatInverse G
  unitIso :=
    NatIso.ofComponents
      (fun X => by
        rcases X with ‚ü®_, ‚ü®‚ü©‚ü©
        exact Iso.refl _)
      (by
        rintro ‚ü®_, ‚ü®‚ü©‚ü© ‚ü®_, ‚ü®‚ü©‚ü© ‚ü®base, ‚ü®‚ü®f‚ü©‚ü©‚ü©
        dsimp at *
        simp
        rfl)
  counitIso :=
    NatIso.ofComponents
      (fun X => by
        cases X
        exact Iso.refl _)
      (by
        rintro ‚ü®‚ü© ‚ü®‚ü© ‚ü®f, e‚ü©
        dsimp at *
        simp
        rfl)
  functor_unitIso_comp := by
    rintro ‚ü®_, ‚ü®‚ü©‚ü©
    dsimp
    simp
    rfl

-- TODO: Grothendieck F = pre identity F
variable (F) in
/-- Applying a functor `G : D ‚•§ C` to the base of the Grothendieck construction induces a functor
`Grothendieck (G ‚ãô F) ‚•§ Grothendieck F`. -/
@[simps]
def pre (G : D ‚•§ C) : Grothendieck (G ‚ãô F) ‚•§ Grothendieck F where
  obj X := ‚ü®G.obj X.base, X.fiber‚ü©
  map f := ‚ü®G.map f.base, f.fiber‚ü©
  map_id X := Grothendieck.ext _ _ (G.map_id _) (by simp)
  map_comp f g := Grothendieck.ext _ _ (G.map_comp _ _) (by simp)

variable (F) in
@[simp]
-- TODO: Why does this type check?
theorem pre_id : pre F (ùü≠ C) = ùü≠ _ := by
  simp only [pre, Functor.id_obj, Functor.id_map, map, Functor.comp_obj, NatTrans.id_app,
    Cat.id_obj, Functor.comp_map, Cat.comp_obj, eqToHom_refl, Cat.id_app, Cat.id_map,
    Category.id_comp]
  rfl

variable (F) in
def preNatTrans {G H : D ‚•§ C} (Œ± : G ‚ü∂ H) :
    pre F G ‚ü∂ (map (whiskerRight Œ± F)) ‚ãô (pre F H) := by
  refine ‚ü®fun X => ‚ü®Œ±.app X.base, eqToHom rfl‚ü©, ?_‚ü©
  intros
  apply Grothendieck.ext <;> simp

/-!
This is a variant of `preNatTrans` for which the type and the implementation depend on
transformations `Œ±` and `Œ≤` that may not be definitionally equal, even though `Œ± = Œ≤`.
This can be helpful to avoid dependent type theory hell when rewriting Œ±.
-/
variable (F) in
def preNatTrans' {G H : D ‚•§ C} (Œ± : G ‚ü∂ H) {Œ≤ : G ‚ü∂ H} (h : Œ± = Œ≤) :
    pre F G ‚ü∂ (map (whiskerRight Œ≤ F)) ‚ãô (pre F H) := by
  refine ‚ü®fun X => ‚ü®Œ±.app X.base, eqToHom (by rw [h]; rfl)‚ü©, ?_‚ü©
  cases h
  intros
  apply Grothendieck.ext <;> simp

lemma preNatTrans'_rfl_eq {G H : D ‚•§ C} (Œ± : G ‚ü∂ H) :
    preNatTrans' F Œ± rfl = preNatTrans F Œ± := rfl

lemma preNatTrans_app {G H : D ‚•§ C} (Œ± : G ‚ü∂ H) (x : Grothendieck (G ‚ãô F)) :
    (preNatTrans F Œ±).app x = ‚ü®Œ±.app x.base, eqToHom rfl‚ü© := rfl

@[simp]
lemma base_eqToHom {x y : Grothendieck F} (h : x = y) : (eqToHom h).base = eqToHom (by congr) := by
  cases h ; rfl

@[simp]
lemma fiber_eqToHom {x y : Grothendieck F} (h : x = y) :
    (eqToHom h).fiber = (eqToHom (by cases h ; simp)) := by cases h ; rfl

lemma preNatTrans'_id {G : D ‚•§ C} {Œ≤ : G ‚ü∂ G} (h : ùüô G = Œ≤) :
    preNatTrans' F (ùüô G) h = eqToHom (by
      cases h
      simp only [whiskerRight_id', map_id_eq]
      simp only [CategoryStruct.id]
      simp only [Cat.of_Œ±]
      rw [Functor.id_comp]) := by
  cases h
  simp only [preNatTrans', Functor.comp_obj, NatTrans.id_app, pre_obj_base, map_obj_base,
    pre_obj_fiber, map_obj_fiber, whiskerRight_app, eqToHom_refl]
  ext X
  simp only [Functor.comp_obj, eqToHom_app]
  fapply Grothendieck.ext
  ¬∑ simp only [base_eqToHom] ; rfl
  ¬∑ simp only [fiber_eqToHom]
    simp only [pre_obj_base, map_obj_base, id_eq, Cat.of_Œ±, eq_mpr_eq_cast, cast_eq, pre_obj_fiber,
      map_obj_fiber, Functor.comp_obj, whiskerRight_app, NatTrans.id_app, Category.comp_id]

variable (F) in
lemma preNatTrans_comp {G H I : D ‚•§ C} (Œ± : G ‚ü∂ H) (Œ≤ : H ‚ü∂ I) :
    preNatTrans F (Œ± ‚â´ Œ≤) = preNatTrans F Œ± ‚â´ whiskerLeft (map (whiskerRight Œ± F)) (preNatTrans F Œ≤)
      ‚â´ eqToHom (by simp [map_comp_eq_assoc]) := by
  ext x
  simp only [NatTrans.comp_app, eqToHom_app, whiskerLeft_app, preNatTrans_app]
  fapply Grothendieck.ext
  ¬∑ simp only [pre_obj_base, Functor.comp_obj, map_obj_base, pre_obj_fiber, map_obj_fiber,
    whiskerRight_app, eqToHom_refl, comp_base, base_eqToHom, Category.comp_id]
  ¬∑ simp only [Functor.comp_obj, pre_obj_base, map_obj_base, pre_obj_fiber, map_obj_fiber,
    whiskerRight_app, eqToHom_refl, comp_base, NatTrans.comp_app, Category.comp_id, comp_fiber,
    Functor.map_id, fiber_eqToHom, base_eqToHom, Cat.id_obj, Functor.map_comp, Cat.comp_obj,
    eqToHom_naturality, eqToHom_trans]

variable (F) in
@[reassoc]
lemma preNatTrans_comp2 {G H I : D ‚•§ C} (Œ± : G ‚ü∂ H) (Œ≤ : H ‚ü∂ I) :
    preNatTrans F (Œ± ‚â´ Œ≤) ‚â´ eqToHom (by simp [map_comp_eq_assoc]) = preNatTrans F Œ± ‚â´
      whiskerLeft (map (whiskerRight Œ± F)) (preNatTrans F Œ≤) := by
  simp only [preNatTrans_comp, Category.assoc, eqToHom_trans, eqToHom_refl, Category.comp_id]

variable (F) in
def invPreNatTrans {G H : D ‚•§ C} (Œ± : G ‚âÖ H) :
    map (whiskerRight Œ±.hom F) ‚ãô pre F H ‚ü∂ pre F G := by
  refine whiskerLeft (map (whiskerRight Œ±.hom F)) (preNatTrans F Œ±.inv) ‚â´ eqToHom ?_
  rw [‚Üê map_comp_eq_assoc, ‚Üê whiskerRight_comp, Œ±.hom_inv_id, whiskerRight_id', map_id_eq]
  apply Functor.id_comp

@[simp]
def preNatTrans_comp_invPreNatTrans_eq {G H : D ‚•§ C} (Œ± : G ‚âÖ H) :
    preNatTrans F Œ±.hom ‚â´ invPreNatTrans F Œ± = ùüô (pre F G) := by
  rw [invPreNatTrans, ‚Üê preNatTrans_comp2_assoc, ‚Üê preNatTrans'_rfl_eq, eqToHom_trans]
  -- Iso.hom_inv_id is a nice example where simp works but rw doesn't
  simp only [Iso.hom_inv_id, preNatTrans'_id, eqToHom_trans, eqToHom_refl]

@[simp]
def invPreNatTrans_comp_preNatTrans_eq {G H : D ‚•§ C} (Œ± : G ‚âÖ H) :
    invPreNatTrans F Œ± ‚â´ preNatTrans F Œ±.hom = ùüô _ := by
  simp only [invPreNatTrans]

  ext X
  simp only [Functor.comp_obj, NatTrans.comp_app, whiskerLeft_app, preNatTrans_app, eqToHom_app,
    map_obj_base]
  fapply Grothendieck.ext
  ¬∑ simp only [pre_obj_base, map_obj_base, pre_obj_fiber, map_obj_fiber, Functor.comp_obj,
    whiskerRight_app, eqToHom_refl, Category.assoc, comp_base, base_eqToHom, Category.id_comp,
    Iso.inv_hom_id_app, NatTrans.id_app, id_base]
  ¬∑ simp only [comp_fiber, fiber_eqToHom, eqToHom_trans, eqToHom_map]
    simp only [NatTrans.id_app, id_fiber]

-- TODO: implement calcSymm tactic?
-- TODO: move to Bicategory
def isoCancelRight'' {C : Type*} [Bicategory C] {c d e : C} {f : d ‚ü∂ e} {finv : e ‚ü∂ d}
    {g‚ÇÅ g‚ÇÇ : c ‚ü∂ d} (Œ∑ : ùüô _ ‚âÖ f ‚â´ finv) (Œ± : g‚ÇÅ ‚â´ f ‚âÖ g‚ÇÇ ‚â´ f) : g‚ÇÅ ‚âÖ g‚ÇÇ := by
  calc
    g‚ÇÅ ‚âÖ g‚ÇÅ ‚â´ ùüô _ := Bicategory.rightUnitor _ |>.symm
    _ ‚âÖ g‚ÇÅ ‚â´ f ‚â´ finv := Bicategory.whiskerLeftIso _ Œ∑
    _ ‚âÖ (g‚ÇÅ ‚â´ f) ‚â´ finv := Bicategory.associator _ _ _ |>.symm
    _ ‚âÖ (g‚ÇÇ ‚â´ f) ‚â´ finv := Bicategory.whiskerRightIso Œ± _
    _ ‚âÖ g‚ÇÇ ‚â´ f ‚â´ finv := Bicategory.associator _ _ _
    _ ‚âÖ _ := Bicategory.whiskerLeftIso _ Œ∑.symm
    _ ‚âÖ g‚ÇÇ := Bicategory.rightUnitor _

-- TODO: Can we reduce this *nicely* to bicategories?
def isoCancelRight' {E : Type*} [Category E]
    {F : D ‚•§ E} {Finv : E ‚•§ D} {G‚ÇÅ G‚ÇÇ : C ‚•§ D} (Œ∑ : ùü≠ _ ‚âÖ F ‚ãô Finv)
    (Œ± : G‚ÇÅ ‚ãô F ‚âÖ G‚ÇÇ ‚ãô F) : (G‚ÇÅ ‚âÖ G‚ÇÇ) := by
  calc
    G‚ÇÅ ‚ãô ùü≠ _ ‚âÖ G‚ÇÅ ‚ãô F ‚ãô Finv := isoWhiskerLeft _ Œ∑
    _ ‚âÖ G‚ÇÇ ‚ãô F ‚ãô Finv := isoWhiskerRight Œ± _
    _ ‚âÖ G‚ÇÇ ‚ãô ùü≠ _ := isoWhiskerLeft _ Œ∑.symm

def isoCancelRight {E : Type*} [Category E] {G‚ÇÅ G‚ÇÇ : E ‚•§ D} (F : D ‚âå C)
    (Œ± : G‚ÇÅ ‚ãô F.functor ‚âÖ G‚ÇÇ ‚ãô F.functor) : (G‚ÇÅ ‚âÖ G‚ÇÇ) := isoCancelRight' F.unitIso Œ±

variable (F) in
def preNatIso {G H : D ‚•§ C} (Œ± : G ‚âÖ H) :
    pre F G ‚âÖ (map (whiskerRight Œ±.hom F)) ‚ãô (pre F H) :=
  ‚ü®preNatTrans F Œ±.hom, invPreNatTrans F Œ±, by simp, by simp‚ü©

instance isEquivalence_pre_id : Functor.IsEquivalence <| pre F <| ùü≠ C := by
  simp only [pre_id]
  infer_instance

variable (F) in
def preInv (G : D ‚âå C) : Grothendieck F ‚•§ Grothendieck (G.functor ‚ãô F) := by
  refine map ?_ ‚ãô Grothendieck.pre (G.functor ‚ãô F) G.inverse
  rw [‚Üê Functor.assoc]
  exact eqToHom (Functor.id_comp F) ‚â´ (whiskerRight G.counitInv F)

lemma pre_comp_map (G: D ‚•§ C) {H : C ‚•§ Cat} (Œ± : F ‚ü∂ H) :
    pre F G ‚ãô map Œ± = map (whiskerLeft G Œ±) ‚ãô pre H G := rfl

variable (F) {E : Type*} [Category E] in
@[simp]
lemma pre_comp (G : D ‚•§ C) (H : E ‚•§ D) : pre F (H ‚ãô G) = pre (G ‚ãô F) H ‚ãô pre F G := rfl

variable (F) in
protected def preUnitIso (G : D ‚âå C) :
    map (whiskerRight G.unitInv _) ‚âÖ pre (G.functor ‚ãô F) (G.functor ‚ãô G.inverse) :=
  preNatIso _ G.unitIso.symm |>.symm

variable (F) in
def preEquivalence (G : D ‚âå C) : Grothendieck (G.functor ‚ãô F) ‚âå Grothendieck F := by
  refine Equivalence.mk (pre F G.functor) (preInv F G) ?_ ?_
  ¬∑ simp only [preInv, eqToHom_refl, Category.id_comp, eq_mpr_eq_cast, cast_eq]
    erw [‚Üê Functor.assoc, pre_comp_map, Functor.assoc]
    simp only [Functor.assoc, ‚Üê pre_comp]
    calc
      _ = map (ùüô _) := map_id_eq.symm
      _ = map _ := ?_
      _ = map _ ‚ãô map _ := map_comp_eq _ _
      _ ‚âÖ _ := (Grothendieck.preUnitIso F G |> isoWhiskerLeft _)
    congr
    ext X
    simp only [Functor.comp_obj, Functor.comp_map, ‚Üê Functor.map_comp, Functor.id_obj,
      Functor.map_id, NatTrans.comp_app, NatTrans.id_app, whiskerLeft_app, whiskerRight_app,
      Equivalence.counitInv_functor_comp]
  ¬∑ simp only [preInv, eqToHom_refl, Category.id_comp, eq_mpr_eq_cast, cast_eq, Functor.assoc,
    ‚Üê pre_comp]
    exact preNatIso F G.counitIso.symm |>.symm

def mapWhiskerLeftIsoConjPreMap (F : C ‚•§ Cat) (G : D ‚âå C) (Œ± : F ‚ü∂ F) :
    map (whiskerLeft G.functor Œ±) ‚âÖ
      (preEquivalence F G).functor ‚ãô map Œ± ‚ãô (preEquivalence F G).inverse := by
  apply Iso.symm
  apply isoCancelRight (preEquivalence F G)
  exact isoWhiskerLeft ((preEquivalence F G).functor ‚ãô map Œ±) (preEquivalence F G).counitIso

-- TODO: currently unused, where to put?
section Transport

def transport (x : Grothendieck F) {c : C} (t : x.base ‚ü∂ c) :
    Grothendieck F := by
  exact ‚ü®c, (F.map t).obj x.fiber‚ü©

def transport_hom (x : Grothendieck F) {c : C} (t : x.base ‚ü∂ c) :
    x ‚ü∂ x.transport t := ‚ü®_, CategoryStruct.id _‚ü©

-- theorem transport_hom_comp (x : Grothendieck F) {c c' : C} (t : x.base ‚ü∂ c) (t' : c ‚ü∂ c') :
--     x.transport_hom (t ‚â´ t') = (x.transport_hom t) ‚â´ (x.transport t).transport_hom t' := sorry

noncomputable def transport.iso (x : Grothendieck F) {c : C} (t : x.base ‚ü∂ c) [IsIso t] :
    x.transport t ‚âÖ x := by
  refine ‚ü®?_, x.transport_hom t, ?_, ?_‚ü©
  ¬∑ refine ‚ü®inv t, eqToHom ?_‚ü©
    simp only [transport]
    rw [‚Üê Functor.comp_obj, Functor.map_inv]
    show (F.map t ‚â´ inv (F.map t)).obj x.fiber = x.fiber
    rw [comp_inv_eq_id _ |>.mpr rfl]
    simp only [Cat.id_obj]
  ¬∑ apply Grothendieck.ext <;> simp [transport_hom]
  ¬∑ apply Grothendieck.ext <;> simp [transport_hom]

end Transport

section FunctorFrom

variable {E : Type*} [Category E]

variable (F) in
/-- The inclusion of a fiber `F.obj c` of a functor `F : C ‚•§ Cat` into its Grothendieck
construction.-/
@[simps obj map]
def Œπ (c : C) : F.obj c ‚•§ Grothendieck F where
  obj d := ‚ü®c, d‚ü©
  map f := ‚ü®ùüô _, eqToHom (by simp) ‚â´ f‚ü©
  map_id d := by
    dsimp
    congr
    simp only [Category.comp_id]
  map_comp f g := by
    apply Grothendieck.ext _ _ (by simp)
    simp only [comp_base, ‚Üê Category.assoc, eqToHom_trans, comp_fiber, Functor.map_comp,
      eqToHom_map]
    congr 1
    simp only [eqToHom_comp_iff, Category.assoc, eqToHom_trans_assoc]
    apply Functor.congr_hom (F.map_id _).symm

instance faithful_Œπ (c : C) : (Œπ F c).Faithful where
  map_injective f := by
    injection f with _ f
    rwa [cancel_epi] at f

/-- Every morphism `f : X ‚ü∂ Y` in the base category induces a natural transformation from the fiber
inclusion `Œπ F X` to the composition `F.map f ‚ãô Œπ F Y`. -/
@[simps]
def ŒπNatTrans {X Y : C} (f : X ‚ü∂ Y) : Œπ F X ‚ü∂ F.map f ‚ãô Œπ F Y where
  app d := ‚ü®f, ùüô _‚ü©
  naturality _ _ _ := by
    simp only [Œπ, Functor.comp_obj, Functor.comp_map]
    exact Grothendieck.ext _ _ (by simp) (by simp [eqToHom_map])

variable (fib : ‚àÄ c, F.obj c ‚•§ E) (hom : ‚àÄ {c c' : C} (f : c ‚ü∂ c'), fib c ‚ü∂ F.map f ‚ãô fib c')
variable (hom_id : ‚àÄ c, hom (ùüô c) = eqToHom (by simp only [Functor.map_id]; rfl))
variable (hom_comp : ‚àÄ c‚ÇÅ c‚ÇÇ c‚ÇÉ (f : c‚ÇÅ ‚ü∂ c‚ÇÇ) (g : c‚ÇÇ ‚ü∂ c‚ÇÉ), hom (f ‚â´ g) =
  hom f ‚â´ whiskerLeft (F.map f) (hom g) ‚â´ eqToHom (by simp only [Functor.map_comp]; rfl))

/-- Construct a functor from `Grothendieck F` to another category `E` by providing a family of
functors on the fibers of `Grothendieck F`, a family of natural transformations on morphisms in the
base of `Grothendieck F` and coherence data for this family of natural transformations. -/
@[simps]
def functorFrom : Grothendieck F ‚•§ E where
  obj X := (fib X.base).obj X.fiber
  map {X Y} f := (hom f.base).app X.fiber ‚â´ (fib Y.base).map f.fiber
  map_id X := by simp [hom_id]
  map_comp f g := by simp [hom_comp]

/-- `Grothendieck.Œπ F c` composed with `Grothendieck.functorFrom` is isomorphic a functor on a fiber
on `F` supplied as the first argument to `Grothendieck.functorFrom`. -/
def ŒπCompFunctorFrom (c : C) : Œπ F c ‚ãô (functorFrom fib hom hom_id hom_comp) ‚âÖ fib c :=
  NatIso.ofComponents (fun _ => Iso.refl _) (fun f => by simp [hom_id])

end FunctorFrom

end Grothendieck

end CategoryTheory
